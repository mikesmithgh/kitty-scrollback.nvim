*kitty-scrollback.nvim.txt*                                     For NVIM v0.9+

==============================================================================
Table of Contents                    *kitty-scrollback.nvim-table-of-contents*

1. kitty-scrollback.nvim         |kitty-scrollback.nvim-kitty-scrollback.nvim|
  - Features                                  |kitty-scrollback.nvim-features|
  - Migrating to v4.0.0            |kitty-scrollback.nvim-migrating-to-v4.0.0|
  - Prerequisites                        |kitty-scrollback.nvim-prerequisites|
  - Quickstart                              |kitty-scrollback.nvim-quickstart|
  - Installation                          |kitty-scrollback.nvim-installation|
  - Setup                                        |kitty-scrollback.nvim-setup|
  - Configuration                        |kitty-scrollback.nvim-configuration|
  - Environment Variables        |kitty-scrollback.nvim-environment-variables|
  - Commands                                  |kitty-scrollback.nvim-commands|
  - Keymaps                                    |kitty-scrollback.nvim-keymaps|
  - Recommendations                    |kitty-scrollback.nvim-recommendations|
  - Acknowledgements                  |kitty-scrollback.nvim-acknowledgements|
  - Alternatives                          |kitty-scrollback.nvim-alternatives|



==============================================================================
1. kitty-scrollback.nvim         *kitty-scrollback.nvim-kitty-scrollback.nvim*

Navigate your Kitty <https://sw.kovidgoyal.net/kitty/> scrollback buffer to
quickly search, copy, and execute commands in Neovim <https://neovim.io/>.


FEATURES                                      *kitty-scrollback.nvim-features*


`-` `üòª Navigate Kitty's scrollback buffer with Neovim`
- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- That‚Äôs it! You are in Neovim, navigate the scrollback buffer.


`-` `üê± Copy scrollback contents to system clipboard`

- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- Search backward for a pattern in Neovim `?{pattern}<CR>`
- Enter Visual mode `v` and select desired text
- Copy selection to clipboard (default mapping `<leader>y`)
- `kitty-scrollback.nvim` automatically closes


`-` `üò∫ Paste visual selection to Kitty`

- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- Search backward for a pattern in Neovim `?{pattern}<CR>`
- Enter Visual mode `v` and select desired text
- Paste visual selection to Kitty (default mapping `<S-CR>`)
- `kitty-scrollback.nvim` automatically closes and pastes the contents for further editing


`-` `üôÄ Execute visual selection in Kitty`

- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- Search backward for a pattern in Neovim `?{pattern}<CR>`
- Enter Visual mode `v` and select desired text
- Execute visual selection in Kitty (default mapping `<C-CR>`)
- `kitty-scrollback.nvim` automatically closes and executes the visual selection


`-` `üò∏ Modify and send content from paste window to Kitty`

- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- Search backward for a pattern in Neovim `?{pattern}<CR>`
- Enter Visual mode `v` and select desired text
- Copy selection to the paste window in `kitty-scrollback.nvim` for further edits
    - Alternatively, you could just enter Insert mode (`i` or `a`) to open an empty floating window (similar to `<C-x><C-e>` in Bash)
- Modify the content in the paste window
- Paste the content of the paste window to Kitty (default mapping `<S-CR>`)
- `kitty-scrollback.nvim` automatically closes and pastes the contents for further editing


`-` `üòº Modify and execute content from paste window to Kitty`

- Open Kitty‚Äôs scrollback history (default mapping `<C-S-h>`)
- Search backward for a pattern in Neovim `?{pattern}<CR>`
- Enter Visual mode `v` and select desired text
- Copy selection to the paste window in `kitty-scrollback.nvim` for further edits
    - Alternatively, you could just enter Insert mode (`i` or `a`) to open an empty floating window (similar to `<C-x><C-e>` in Bash)
- Modify the content in the paste window
- Execute the content of the paste window in Kitty (default mapping `<C-CR>`)
- `kitty-scrollback.nvim` automatically closes and executes the content of the paste window


MIGRATING TO V4.0.0                *kitty-scrollback.nvim-migrating-to-v4.0.0*


  |‚Äº| |IMPORTANT|
  v4.0.0 has breaking changes and requires steps to properly migrate from v3.X.X.
  You can ignore this section if you have not previously installed any version of
  kitty-scrollback.nvim

`-` `Migration Steps`
    **Redesigned Plugin Configuration**
    - The flag `--no-nvim-args` has been removed. The default behavior of kitty-scrollback.nvim no longer passes arguments to nvim making `--no-nvim-args` pointless.
        You can still pass arguments to nvim with the `--nvim-args` flag.
    - `ksb_example` configurations have been removed and can no longer be referenced by name. These are used for testing and demo purposes. The configurations are still available as a reference at ./tests/example.lua <./tests/example.lua>.
    - The command `KittyScrollbackGenerateKittens` and api `generate_kittens` no longer have an option to generate `ksb_example` configurations.
    - The command `KittyScrollbackGenerateKittens` no longer accepts the bang `!` modifier
    - The api `generate_kittens` signature removed the `all` parameter
    - Removed the undocumented reserved `default` configuration name
    - Removed the reserved `global` configuration name


PREREQUISITES                            *kitty-scrollback.nvim-prerequisites*

- Neovim v0.9+ <https://github.com/neovim/neovim/releases>
- Kitty v0.29+ <https://github.com/kovidgoyal/kitty/releases>


QUICKSTART                                  *kitty-scrollback.nvim-quickstart*

To quickly test this plugin without changing your configuration run the
command:

>sh
    sh -c "$(curl -s https://raw.githubusercontent.com/mikesmithgh/kitty-scrollback.nvim/main/scripts/mini.sh)"
<


  `‚Ñπ` `NOTE` 
  It is good practice to first read the script
<https://github.com/mikesmithgh/kitty-scrollback.nvim/blob/main/scripts/mini.sh>
  before running `sh -c` directly from the web

INSTALLATION                              *kitty-scrollback.nvim-installation*


`-` `Using lazy.nvim <https://github.com/folke/lazy.nvim>`

>lua
      {
        'mikesmithgh/kitty-scrollback.nvim',
        enabled = true,
        lazy = true,
        cmd = { 'KittyScrollbackGenerateKittens', 'KittyScrollbackCheckHealth' },
        event = { 'User KittyScrollbackLaunch' },
        -- version = '*', -- latest stable version, may have breaking changes if major version changed
        -- version = '^4.0.0', -- pin major version, include fixes and features that do not have breaking changes
        config = function()
          require('kitty-scrollback').setup()
        end,
      }
<


`-` `Using packer.nvim <https://github.com/wbthomason/packer.nvim>`

>lua
      use({
        'mikesmithgh/kitty-scrollback.nvim',
        disable = false,
        opt = true,
        cmd = { 'KittyScrollbackGenerateKittens', 'KittyScrollbackCheckHealth' },
        event = { 'User KittyScrollbackLaunch' },
        -- tag = '*', -- latest stable version, may have breaking changes if major version changed
        -- tag = 'v4.0.0', -- pin specific tag
        config = function()
          require('kitty-scrollback').setup()
        end,
      })
<


`-` `Using Neovim's built-in package support pack <https://neovim.io/doc/user/usr_05.html#05.4>`

>bash
    mkdir -p "$HOME/.local/share/nvim/site/pack/mikesmithgh/start/"
    cd $HOME/.local/share/nvim/site/pack/mikesmithgh/start
    git clone git@github.com:mikesmithgh/kitty-scrollback.nvim.git
    nvim -u NONE -c "helptags kitty-scrollback.nvim/doc" -c q
    mkdir -p "$HOME/.config/nvim"
    echo "require('kitty-scrollback').setup()" >> "$HOME/.config/nvim/init.lua"
<


SETUP                                            *kitty-scrollback.nvim-setup*

This section outlines the required configuration for kitty-scrollback.nvim.

- Enable allow_remote_control
<https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.allow_remote_control> in
    kitty.conf <https://sw.kovidgoyal.net/kitty/conf/>
    - Valid values are `yes`, `socket`, `socket-only`
    - If kitty-scrollback.nvim is the only application controlling Kitty then `socket-only` is preferred to continue denying TTY requests.
- Set listen_on <https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.listen_on> to a
    Unix socket in kitty.conf <https://sw.kovidgoyal.net/kitty/conf/>
    - For example, `listen_on unix:/tmp/kitty`
- Enable shell_integration
<https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.shell_integration> in
    kitty.conf <https://sw.kovidgoyal.net/kitty/conf/>
    - Set `shell_integration` to `enabled`
    - Do not add the option `no-prompt-mark`
- Generate the default kitty-scrollback.nvim Kitten
<https://sw.kovidgoyal.net/kitty/kittens_intro/> mappings and add them to
    kitty.conf <https://sw.kovidgoyal.net/kitty/conf/>

>sh
        nvim --headless +'KittyScrollbackGenerateKittens' +'set nonumber' +'set norelativenumber' +'%print' +'quit!' 2>&1
<
- Completely close and reopen Kitty
- Check the health of kitty-scrollback.nvim

>sh
        nvim +'KittyScrollbackCheckHealth'
<
    - Follow the instructions of any `ERROR` or `WARNINGS` reported during the healthcheck
- Test kitty-scrollback.nvim is working as expected by pressing `kitty_mod+h` to
    open the scrollback history in Neovim
    - kitty_mod <https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.kitty_mod> is a special modifier key alias for default shortcuts. You can change the value of this option to
        alter all default shortcuts that use kitty_mod <https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.kitty_mod>. The default value of kitty_mod <https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.kitty_mod> is `ctrl+shift`. In this example, `kitty_mod+h` represents `ctrl+shift+h`.
- See example kitty.conf for reference.

>sh
        allow_remote_control yes
        listen_on unix:/tmp/kitty
        shell_integration enabled
        
        # kitty-scrollback.nvim Kitten alias
        action_alias kitty_scrollback_nvim kitten /path/to/your/install/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
        
        # Browse scrollback buffer in nvim
        map kitty_mod+h kitty_scrollback_nvim
        # Browse output of the last shell command in nvim
        map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
        # Show clicked command output in nvim
        mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output
<


CONFIGURATION                            *kitty-scrollback.nvim-configuration*

This section provides details on how to customize your kitty-scrollback.nvim
configuration.


  `‚Ñπ` `NOTE` 
  The Advanced Configuration Examples
<https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/Advanced-Configuration-Examples>
  section of the Wiki provides detailed demos of each configuration option.

KITTEN ARGUMENTS ~

Arguments that can be passed to the `kitty_scrollback_nvim` Kitten
<https://sw.kovidgoyal.net/kitty/kittens_intro/> defined in kitty.conf
<https://sw.kovidgoyal.net/kitty/conf/>. You can provide the arguments to the
`action_alias kitty_scrollback_nvim` or each individual mapping referencing
`kitty_scrollback_nvim`.

The following examples show you how you could reference a kitty-scrollback.nvim
user configuration by name (.e.g, `myconfig`), set the environment variable
`NVIM_APPNAME` for Neovim, and pass the argument `-n` to Neovim to disable swap
files. - Example of adding arguments to `action_alias` in kitty.conf
<https://sw.kovidgoyal.net/kitty/conf/>. - This will apply the arguments to all
the mappings of `kitty_scrollback_nvim`. `kitty action_alias
kitty_scrollback_nvim kitten
/path/to/your/install/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
--env NVIM_APPNAME=mynvim --config myconfig --nvim-args -n`

- Example of adding arguments to a `map` in kitty.conf <https://sw.kovidgoyal.net/kitty/conf/>.
    - This will apply the arguments only to the `kitty_mod+h` mappings of `kitty_scrollback_nvim`.

>kitty
        map kitty_mod+h kitty_scrollback_nvim --env NVIM_APPNAME=mynvim --config myconfig --nvim-args -n
<

  ----------------------------------------------------------------------------------
  Argument      Description
  ------------- --------------------------------------------------------------------
  --config      The name of the kitty-scrollback.nvim plugin configuration. The
                configuration can be defined during plugin setup (i.e.,
                require('kitty-scrollback').setup({ ... })).

  --nvim-args   All arguments after this flag are passed to the Neovim instance that
                displays the scrollback buffer. This must be the last of the
                kitty-scrollback.nvim Kitten arguments that are configured.
                Otherwise, you may unintentionally send the wrong arguments to
                Neovim. The default arguments passed to Neovim are
                --clean --noplugin -n. This flag removes those options.

  --env         Environment variable that is passed to the Neovim instance that
                displays the scrollback buffer. Format is --env var_name=var_value.
                You may specify multiple config files that will merge all
                configuration options. Useful for setting NVIM_APPNAME

  --cwd         The current working directory of the Neovim instance that displays
                the scrollback buffer.
  ----------------------------------------------------------------------------------

PLUGIN CONFIGURATION ~

kitty-scrollback.nvim is configured using the
`require('kitty-scrollback').setup()` function. `setup()` accepts an options
table in the form of `table<string, KsbOpts|fun(KsbKittyData):KsbOpts>`. The
structure of `KsbOpts` is defined in lua/kitty-scrollback/configs/defaults.lua
<./lua/kitty-scrollback/configs/defaults.lua>.

The key for an entry in the options table is the name of a configuration that
you wish to define. The key can be be referenced as the name of the
configuration that is passed to the |kitty-scrollback.nvim-kitten-argument|
`--config`. For example, with a configuration named `myconfig` that disables
ANSI colors:

>lua
    require('kitty-scrollback').setup({
        myconfig = {
          kitty_get_text = {
            ansi = false,
          },
        }
    })
<

You can reference this specific configuration as follows in kitty.conf to
disable ANSI colors for the `kitty_mod+h` mapping.

>kitty
    map kitty_mod+h kitty_scrollback_nvim --config myconfig
<

The value of an entry in the options table can either be a table (`KsbOpts`) or
a function (`fun(KsbKittyData):KsbOpts`). `KsbKittyData` contains metadata
about Kitty and the scrollback buffer that may be useful when defining a
configuration. The structure of `KsbKittyData` is defined in
lua/kitty-scrollback/launch.lua <./lua/kitty-scrollback/launch.lua>. For
example, you could add an additional configuration named `myfnconfig` that only
loads the entire scrollback history if the user scrolled past the number of
lines on the screen.

>lua
    require('kitty-scrollback').setup({
        myconfig = {
          kitty_get_text = {
            ansi = false,
          },
        }
        myfnconfig = function(kitty_data)
          return {
            kitty_get_text = {
              extent = (kitty_data.scrolled_by > kitty_data.lines) and 'all' or 'screen',
            },
          }
        end,
    })
<

If you update the reference in kitty.conf to `myfnconfig` then the
`kitty_mod+h` mapping will use the configuration returned by the function
defined by `myfnconfig`.

>kitty
    map kitty_mod+h kitty_scrollback_nvim --config myfnconfig
<

The key for an entry in the options table can be any `string`. However, if the
key matches a builtin name (prefixed with `ksb_builtin_`) then the
configuration will be merged with the builtin configuration. All of the builtin
configurations are defined in lua/kitty-scrollback/configs/builtin.lua
<./lua/kitty-scrollback/configs/builtin.lua>. The user defined configuration
will take precedence and override any fields that are defined in both the
builtin and user defined configuration.

Having the ability to merge a user defined configuration with the builtin in
configuration is useful for scenarios that you wish to keep the default kitten
mappings generated by the `:KittyScrollbackGenerateKittens` command.

For example, imagine a scenario where you wish to modify the configuration for
the `ksb_builtin_get_text_all` but do not wish to provide you own configuration
name `myconfig` and have to update the reference in `kitty.conf` to `map
kitty_mod+h kitty_scrollback_nvim --config myconfig`. In this scenario, the
default mapping is defined in `kitty.conf` as

>
    map kitty_mod+h kitty_scrollback_nvim
<


  `‚Ñπ` `NOTE` 
  When no explicit configuration is passed to `kitty_scrollback_nvim`, the config
  `ksb_builtin_get_text_all` is used. Effectively, the command becomes `map
  kitty_mod+h kitty_scrollback_nvim --config ksb_builtin_get_text_all`
You can achieve this by creating a user defined configuration with the key
`ksb_builtin_get_text_all` as follows.

>lua
      ksb_builtin_get_text_all = {
        kitty_get_text = {
          ansi = false,
        },
      }
<

The builtin configuration for `ksb_builtin_get_text_all` is

>lua
      ksb_builtin_get_text_all = {
        kitty_get_text = {
          extent = 'all',
        },
      },
<

The user and builtin configurations will be merged resulting in

>lua
      ksb_builtin_get_text_all = {
        kitty_get_text = {
          ansi = false,
          extent = 'all',
        },
      },
<

This approach can be used to modify the builtin configuration (e.g.,
`ksb_builtin_get_text_all`, `ksb_builtin_last_cmd_output`, and
`ksb_builtin_last_visited_cmd_output`). But, if you have a common configuration
that you wish to have applied to all of configurations, then it is better to
use a global configuration.

So far, all entries in the options table have been in the form a key/value pair
where the key is a `string` representing the name of the configuration. There
is an additional reserved entry for the global configuration which is the first
element of the options table without a key (technically the key is `1` but it
does not have to be defined).

If you would like to provide a global configuration to automatically hide the
status window, this can be achieved as follows. Notice the first entry in the
options table does not define a key, this will be considered global options and
applied to all builtin and user defined configurations.

>lua
    require('kitty-scrollback').setup({
        -- global configuration
        {
          status_window = {
            autoclose = true,
          },
        },
        -- builtin configuration override
        ksb_builtin_get_text_all = {
          kitty_get_text = {
            ansi = false,
          },
        },
        -- user defined configuration table
        myconfig = {
          kitty_get_text = {
            ansi = false,
          },
        }
        -- user defined configuration function
        myfnconfig = function(kitty_data)
          return {
            kitty_get_text = {
              extent = (kitty_data.scrolled_by > kitty_data.lines) and 'all' or 'screen',
            },
          }
        end,
    })
<

The configuration precedence is `default > global > builtin > user` where
`default` has the lowest and `user` has the highest precedence.

To summarize, - `default` is the standard options defined by
kitty-scrollback.nvim and can be found in the file
lua/kitty-scrollback/configs/defaults.lua
<./lua/kitty-scrollback/configs/defaults.lua>. - `global` is global options
that apply to all `builtin` and `user` defined configurations. The first
element in the options table without a key is considered the `global` options.
- `builtin` is the options defined by kitty-scrollback.nvim for each
`kitty_scrollback_nvim` kitten command generated by
`:KittyScrollbackGenerateKittens` (e.g., `ksb_builtin_get_text_all`,
`ksb_builtin_last_cmd_output`, and `ksb_builtin_last_visited_cmd_output`). The
builtin options can be found in the file
lua/kitty-scrollback/configs/builtin.lua
<./lua/kitty-scrollback/configs/builtin.lua>. - `user` is the options defined
by the user in the options table with a `string` name that is referenced in
`kitty.conf` using the `--config` flag when defining a mapping for the
`kitty_scrollback_nvim` kitten (e.g., `map kitty_mod+h kitty_scrollback_nvim
--config myconfig`). User defined options can be any `string` and will merge
with `builtin` options if they share the same key such as
`ksb_builtin_get_text_all`.

  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Options                                                       Type                                                                             Description
  ------------------------------------------------------------- -------------------------------------------------------------------------------- -----------------------------------------------------------
  callbacks                                                     KsbCallbacks?                                                                    fire and forget callback functions

  callbacks.after_setup                                         fun(kitty_data: KsbKittyData, opts: KsbOpts)?                                    callback executed after initializing kitty-scrollback.nvim

  callbacks.after_launch                                        fun(kitty_data: KsbKittyData, opts: KsbOpts)?                                    callback executed after launch started to process the
                                                                                                                                                 scrollback buffer

  callbacks.after_ready                                         fun(kitty_data: KsbKittyData, opts: KsbOpts)?                                    callback executed after scrollback buffer is loaded and
                                                                                                                                                 cursor is positioned

  keymaps_enabled                                               boolean?                                                                         if true, enabled all default keymaps

  restore_options                                               boolean?                                                                         if true, restore options that were modified while
                                                                                                                                                 processing the scrollback buffer

  highlight_overrides                                           KsbHighlights?                                                                   kitty-scrollback.nvim highlight overrides

  highlight_overrides.KittyScrollbackNvimStatusWinNormal        table?                                                                           status window Normal highlight group

  highlight_overrides.KittyScrollbackNvimStatusWinHeartIcon     table?                                                                           status window heart icon highlight group

  highlight_overrides.KittyScrollbackNvimStatusWinSpinnerIcon   table?                                                                           status window spinner icon highlight group

  highlight_overrides.KittyScrollbackNvimStatusWinReadyIcon     table?                                                                           status window ready icon highlight group

  highlight_overrides.KittyScrollbackNvimStatusWinKittyIcon     table?                                                                           status window kitty icon highlight group

  highlight_overrides.KittyScrollbackNvimStatusWinNvimIcon      table?                                                                           status window vim icon highlight group

  highlight_overrides.KittyScrollbackNvimPasteWinNormal         table?                                                                           paste window Normal highlight group

  highlight_overrides.KittyScrollbackNvimPasteWinFloatBorder    table?                                                                           paste window FloatBorder highlight group

  highlight_overrides.KittyScrollbackNvimPasteWinFloatTitle     table?                                                                           paste window FloatTitle highlight group

  highlight_overrides.KittyScrollbackNvimVisual                 table?                                                                           scrollback buffer window Visual selection highlight group

  highlight_overrides.KittyScrollbackNvimNormal                 table?                                                                           scrollback buffer window Normal highlight group

  status_window                                                 KsbStatusWindowOpts?                                                             options for status window indicating that
                                                                                                                                                 kitty-scrollback.nvim is ready

  status_window.enabled                                         boolean                                                                          If true, show status window in upper right corner of the
                                                                                                                                                 screen

  status_window.style_simple                                    boolean                                                                          If true, use plaintext instead of nerd font icons

  status_window.autoclose                                       boolean                                                                          If true, close the status window after
                                                                                                                                                 kitty-scrollback.nvim is ready

  status_window.show_timer                                      boolean                                                                          If true, show a timer in the status window while
                                                                                                                                                 kitty-scrollback.nvim is loading

  status_window.icons                                           KsbStatusWindowIcons?                                                            Icons displayed in the status window

  status_window.icons.kitty                                     string                                                                           kitty status window icon

  status_window.icons.heart                                     string                                                                           heart string heart status window icon

  status_window.icons.nvim                                      string                                                                           nvim status window icon

  paste_window                                                  KsbPasteWindowOpts?                                                              options for paste window that sends commands to Kitty

  paste_window.highlight_as_normal_win                          fun(): boolean?                                                                  If function returns true, use Normal highlight group. If
                                                                                                                                                 false, use NormalFloat

  paste_window.filetype                                         string?                                                                          The filetype of the paste window

  paste_window.hide_footer                                      boolean?                                                                         If true, hide mappings in the footer when the paste window
                                                                                                                                                 is initially opened

  paste_window.winblend                                         integer?                                                                         The winblend setting of the window, see :help winblend

  paste_window.winopts_overrides                                fun(paste_winopts: KsbWinOpts): table<string,any>?                               Paste float window overrides, see nvim_open_win() for
                                                                                                                                                 configuration

  paste_window.footer_winopts_overrides                         fun(footer_winopts: KsbWinOpts, paste_winopts: KsbWinOpts): table<string,any>?   Paste footer window overrides, see nvim_open_win() for
                                                                                                                                                 configuration

  paste_window.yank_register                                    string?                                                                          register used during yanks to paste window, see
                                                                                                                                                 :h registers

  paste_window.yank_register_enabled                            boolean?                                                                         If true, the yank_register copies content to the paste
                                                                                                                                                 window. If false, disable yank to paste window

  kitty_get_text                                                KsbKittyGetText?                                                                 options passed to get-text when reading scrollback buffer,
                                                                                                                                                 see kitty @ get-text --help

  kitty_get_text.ansi                                           boolean                                                                          If true, the text will include the ANSI formatting escape
                                                                                                                                                 codes for colors, bold, italic, etc.

  kitty_get_text.clear_selection                                boolean                                                                          If true, clear the selection in the matched window, if any.

  kitty_get_text.extent                                         string                                                                           What text to get. The default of screen means all text
                                                                                                                                                 currently on the screen. all means all the
                                                                                                                                                 screen+scrollback and selection means the currently
                                                                                                                                                 selected text. first_cmd_output_on_screen means the output
                                                                                                                                                 of the first command that was run in the window on screen.
                                                                                                                                                 last_cmd_output means the output of the last command that
                                                                                                                                                 was run in the window. last_visited_cmd_output means the
                                                                                                                                                 first command output below the last scrolled position via
                                                                                                                                                 scroll_to_prompt. last_non_empty_output is the output from
                                                                                                                                                 the last command run in the window that had some non empty
                                                                                                                                                 output. The last four require shell_integration to be
                                                                                                                                                 enabled. Choices: screen, all, first_cmd_output_on_screen,
                                                                                                                                                 last_cmd_output, last_non_empty_output,
                                                                                                                                                 last_visited_cmd_output, selection

  checkhealth                                                   boolean?                                                                         if true execute :checkhealth kitty-scrollback and skip
                                                                                                                                                 setup

  visual_selection_highlight_mode                               string?                                                                          Sets the mode for coloring the Visual highlight group in
                                                                                                                                                 the scrollback buffer window. darken uses a darkened
                                                                                                                                                 version of the Normal highlight group to improve
                                                                                                                                                 readability. kitty uses the colors defined for
                                                                                                                                                 selection_foreground and selection_background in your Kitty
                                                                                                                                                 configuration. nvim uses the default colors defined in the
                                                                                                                                                 Visual highlight group. reverse reverses the foreground and
                                                                                                                                                 background colors of the visual selection.
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

NERD FONTS ~

By default, `kitty-scrollback.nvim` uses Nerd Fonts <https://www.nerdfonts.com>
in the status window. If you would like to use ASCII instead, set the option
`status_window.style_simple` to `true`.


ENVIRONMENT VARIABLES            *kitty-scrollback.nvim-environment-variables*

The environment variable `KITTY_SCROLLBACK_NVIM` is set to `true` while
kitty-scrollback.nvim is active.

This can be used to in your Neovim configuration to provide
kitty-scrollback.nvim specific behavior that may differ from a regular Neovim
instance.

>lua
    if vim.env.KITTY_SCROLLBACK_NVIM == 'true' then
        -- kitty-scrollback.nvim specific configuration
    end
<


COMMANDS                                      *kitty-scrollback.nvim-commands*

The API is available via the `kitty-scrollback.api` module. e.g.,
`require('kitty-scrollback.api')`

  -----------------------------------------------------------------------------------------------------------------------------------------
  Command                                            API                                                    Description
  -------------------------------------------------- ------------------------------------------------------ -------------------------------
  :KittyScrollbackGenerateKittens [generate_modes]   generate_kittens(table<string\|'commands'\|'maps'>)?   Generate Kitten commands used
                                                                                                            as reference for configuring
                                                                                                            kitty.conf

  :KittyScrollbackCheckHealth                        checkhealth()                                          Run
                                                                                                            :checkhealth kitty-scrollback
                                                                                                            in the context of Kitty
  -----------------------------------------------------------------------------------------------------------------------------------------

KEYMAPS                                        *kitty-scrollback.nvim-keymaps*

The API is available via the `kitty-scrollback.api` module. e.g.,
`require('kitty-scrollback.api')`

  --------------------------------------------------------------------------------------------------------------------
<Plug> Mapping                Default      Mode    API                        Description
                                Mapping                                         
  ----------------------------- ------------ ------- -------------------------- --------------------------------------
<Plug>(KsbExecuteCmd)         <C-CR>       n,i     execute_command()          Execute the contents of the paste
                                                                                window in Kitty

<Plug>(KsbPasteCmd)           <S-CR>       n,i     paste_command()            Paste the contents of the paste window
                                                                                to Kitty without executing

<Plug>(KsbExecuteVisualCmd)   <C-CR>       v       execute_visual_command()   Execute the contents of visual
                                                                                selection in Kitty

<Plug>(KsbPasteVisualCmd)     <S-CR>       v       paste_visual_command()     Paste the contents of visual selection
                                                                                to Kitty without executing

<Plug>(KsbToggleFooter)       g?           n       toggle_footer()            Toggle the paste window footer that
                                                                                displays mappings

<Plug>(KsbCloseOrQuitAll)     <Esc>        n       close_or_quit_all()        If the current buffer is the paste
                                                                                buffer, then close the window.
                                                                                Otherwise quit Neovim

<Plug>(KsbQuitAll)            <C-c>        n,i,t   quit_all()                 Quit Neovim

<Plug>(KsbVisualYankLine)     <Leader>Y    v                                  Maps to "+Y

<Plug>(KsbVisualYank)         <Leader>y    v                                  Maps to "+y

<Plug>(KsbNormalYankEnd)      <Leader>Y    n                                  Maps to "+y$

<Plug>(KsbNormalYank)         <Leader>y    n                                  Maps to "+y

<Plug>(KsbNormalYankLine)     <Leader>yy   n                                  Maps to "+yy
  --------------------------------------------------------------------------------------------------------------------

RECOMMENDATIONS                        *kitty-scrollback.nvim-recommendations*

- Check out my Lightning Talk @ Neovim Conf 2023 Developing kitty-scrollback.nvim <https://youtu.be/9TINe0J9rNg?si=_ISKqAQVS2NCuSRF>!

- The following plugins are nice additions to your Neovim and Kitty setup.
    - vim-kitty <https://github.com/fladson/vim-kitty> - Syntax highlighting for Kitty terminal config files
    - smart-splits.nvim <https://github.com/mrjones2014/smart-splits.nvim> - Seamless navigation between Neovim and Kitty split panes


ACKNOWLEDGEMENTS                      *kitty-scrollback.nvim-acknowledgements*

- Kitty custom kitten <https://sw.kovidgoyal.net/kitty/kittens/custom/> documentation
- baleia.nvim <https://github.com/m00qek/baleia.nvim> - very nice plugin to colorize Neovim buffer containing ANSI escape sequences. I plan to add integration with this plugin 
- kovidgoyal/kitty#719Feature Request: Ability to select text with the keyboard (vim-like) <https://github.com/kovidgoyal/kitty/issues/719> - ideas for passing the scrollback buffer to Neovim
    - kovidgoyal/kitty#719 Comment 952039731 <https://github.com/kovidgoyal/kitty/issues/719#issuecomment-952039731> - very detailed solution to opening the Kitty scrollback buffer in Neovim. In particular, I used the `set title` escape code to hide the `[Process exited]` message
- kovidgoyal/kitty#2426 'Failed to open controlling terminal' error when trying to remote control from vim <https://github.com/kovidgoyal/kitty/issues/2426> - workaround for issuing kitty remote commands without a TTY `listen_on unix:/tmp/mykitty`
- kovidgoyal/kitty#6485 Vi mode for kitty <https://github.com/kovidgoyal/kitty/discussions/6485> - inspiration to leverage Neovim‚Äôs terminal for the scrollback buffer
- tokyonight.nvim <https://github.com/folke/tokyonight.nvim> - referenced for color darkening, thank you folke!
- lazy.nvim <https://github.com/folke/lazy.nvim> - referenced for window sizing, thank you folke!
- fzf-lua <https://github.com/ibhagwan/fzf-lua> - quickstart `mini.sh` and inspiration/reference for displaying keymapping footer
- panvimdoc <https://github.com/kdheepak/panvimdoc> - generating vimdocs from README
- lemmy-help <https://github.com/numToStr/lemmy-help> - generating vimdocs from Lua annotations
- bob <https://github.com/MordechaiHadad/bob> - easy Neovim version management to check backward compatibility


ALTERNATIVES                              *kitty-scrollback.nvim-alternatives*

- kitty+page.lua <https://gist.github.com/galaxia4Eva/9e91c4f275554b4bd844b6feece16b3d> - Open Kitty‚Äôs scrollback buffer in Neovim via `scrollback_pager`
- Neovim scrollback pager by page-down <https://github.com/kovidgoyal/kitty/issues/719#issuecomment-952039731> - Linux only solution to open Kitty scrollback buffer in Neovim
- kitty_grab <https://github.com/yurikhan/kitty_grab> - Keyboard-driven screen grabber for Kitty
- kitty-kitten-search <https://github.com/trygveaa/kitty-kitten-search> - Kitten for the kitty terminal emulator providing live incremental search in the terminal history.

==============================================================================
2. Links                                         *kitty-scrollback.nvim-links*

1. *copy_visual_selection_to_clipboard*: https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kitty_scrollback_screencapture_01_should_copy_visual_selection_to_clipboard.gif
2. *kitty_scrollback_screencapture_03_should_paste_visual_selection_to_kitty.gif*: https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kitty_scrollback_screencapture_03_should_paste_visual_selection_to_kitty.gif
3. *kitty_scrollback_screencapture_05_should_execute_visual_selection_in_kitty.mov*: https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kitty_scrollback_screencapture_05_should_execute_visual_selection_in_kitty.gif
4. *kitty_scrollback_screencapture_02_should_paste_paste_window_text_to_kitty.gif*: https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kitty_scrollback_screencapture_02_should_paste_paste_window_text_to_kitty.gif
5. *kitty_scrollback_screencapture_04_should_execute_paste_window_text_in_kitty.gif*: https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kitty_scrollback_screencapture_04_should_execute_paste_window_text_in_kitty.gif

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
